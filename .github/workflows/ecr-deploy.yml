name: Build and Push Backend to Amazon ECR

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/ecr-deploy.yml'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract ECR registry
        id: ecr-reg
        run: echo "registry=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        env:
          REGISTRY: ${{ steps.ecr-reg.outputs.registry }}
        run: |
          IMAGE_URI=$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Building $IMAGE_URI"
          docker build -f backend/Dockerfile -t $IMAGE_URI ./backend
          docker tag $IMAGE_URI $REGISTRY/$ECR_REPOSITORY:latest
          docker push $IMAGE_URI
          docker push $REGISTRY/$ECR_REPOSITORY:latest

      - name: Output image URIs
        run: |
          echo "Image pushed: ${{ steps.ecr-reg.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          echo "Image pushed: ${{ steps.ecr-reg.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"

      - name: Update ECS task definition
        id: task-def
        run: |
          aws ecs describe-task-definition --task-definition plantpal-task \
            --query taskDefinition > task-definition.json
          
          IMAGE_URI=${{ steps.ecr-reg.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          jq --arg IMAGE_URI "$IMAGE_URI" \
             --arg HF_TOKEN "${{ secrets.HF_TOKEN }}" \
             --arg PLANTNET_API_KEY "${{ secrets.PLANTNET_API_KEY }}" \
             --arg OPENROUTER_API_KEY "${{ secrets.OPENROUTER_API_KEY }}" \
             --arg DATABASE_URL "${{ secrets.DATABASE_URL }}" \
             --arg CORS_ORIGINS "http://localhost:3000,http://plantpal-frontend-bucket.s3-website-ap-southeast-1.amazonaws.com" \
             '.containerDefinitions[0].image = $IMAGE_URI |
              .containerDefinitions[0].environment = [
                {"name": "HF_TOKEN", "value": $HF_TOKEN},
                {"name": "PLANTNET_API_KEY", "value": $PLANTNET_API_KEY},
                {"name": "OPENROUTER_API_KEY", "value": $OPENROUTER_API_KEY},
                {"name": "DATABASE_URL", "value": $DATABASE_URL},
                {"name": "CORS_ORIGINS", "value": $CORS_ORIGINS}
              ]' \
             task-definition.json > updated-task-definition.json
          
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
             updated-task-definition.json > clean-task-definition.json
          
          echo "Updated task definition:"
          cat clean-task-definition.json

      - name: Register new task definition
        id: register-task-def
        run: |
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://clean-task-definition.json)
          NEW_REVISION=$(echo $NEW_TASK_DEF | jq -r '.taskDefinition.revision')
          echo "new-revision=$NEW_REVISION" >> $GITHUB_OUTPUT
          echo "✅ Registered new task definition: plantpal-task:$NEW_REVISION"

      - name: Check ECS cluster health
        run: |
          echo "🔍 Checking ECS cluster status..."
          aws ecs describe-clusters \
            --clusters fastapi-cluster \
            --query 'clusters[0].{Status:status,Running:runningTasksCount,Pending:pendingTasksCount,Active:activeServicesCount}' \
            --output table
          
          echo "🔍 Checking EC2 container instances..."
          aws ecs list-container-instances \
            --cluster fastapi-cluster \
            --query 'containerInstanceArns' \
            --output table
          
          INSTANCES=$(aws ecs list-container-instances --cluster fastapi-cluster --query 'containerInstanceArns' --output text)
          if [ ! -z "$INSTANCES" ]; then
            echo "📊 Container instance status:"
            aws ecs describe-container-instances \
              --cluster fastapi-cluster \
              --container-instances $INSTANCES \
              --query 'containerInstances[*].{Status:status,AgentConnected:agentConnected,RunningTasks:runningTasksCount,PendingTasks:pendingTasksCount}' \
              --output table
          else
            echo "⚠️  No container instances found in cluster!"
          fi

      - name: Update ECS service (stop → restart)
        run: |
          echo "🛑 Stopping service to free memory..."
          aws ecs update-service \
            --cluster fastapi-cluster \
            --service fastapi-service \
            --desired-count 0
          
          echo "⏳ Waiting 30s for tasks to stop..."
          sleep 30
          
          echo "🚀 Starting service with new task definition..."
          aws ecs update-service \
            --cluster fastapi-cluster \
            --service fastapi-service \
            --task-definition plantpal-task:${{ steps.register-task-def.outputs.new-revision }} \
            --desired-count 1 \
            --force-new-deployment
          
          echo "✅ ECS service updated to use plantpal-task:${{ steps.register-task-def.outputs.new-revision }}"
          
          echo "⏳ Waiting for deployment to complete..."
          aws ecs wait services-stable \
            --cluster fastapi-cluster \
            --services fastapi-service
          
          echo "✅ Deployment completed successfully!"
