name: Build and Push Backend to Amazon ECR

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/ecr-deploy.yml'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract ECR registry
        id: ecr-reg
        run: echo "registry=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        env:
          REGISTRY: ${{ steps.ecr-reg.outputs.registry }}
        run: |
          IMAGE_URI=$REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Building $IMAGE_URI"
          # Use backend/ as build context
          docker build -f backend/Dockerfile -t $IMAGE_URI ./backend
          # Tag latest
          docker tag $IMAGE_URI $REGISTRY/$ECR_REPOSITORY:latest
          # Push both tags
          docker push $IMAGE_URI
          docker push $REGISTRY/$ECR_REPOSITORY:latest


      - name: Output image URIs
        run: |
          echo "Image pushed: ${{ steps.ecr-reg.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          echo "Image pushed: ${{ steps.ecr-reg.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest"

      - name: Update ECS task definition
        id: task-def
        run: |
          # Download current task definition
          aws ecs describe-task-definition --task-definition plantpal-task \
            --query taskDefinition > task-definition.json
          
          # Update image URI in task definition
          IMAGE_URI=${{ steps.ecr-reg.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          jq --arg IMAGE_URI "$IMAGE_URI" \
             '.containerDefinitions[0].image = $IMAGE_URI' \
             task-definition.json > updated-task-definition.json
          
          # Remove unwanted fields for registration
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
             updated-task-definition.json > clean-task-definition.json
          
          echo "Updated task definition:"
          cat clean-task-definition.json

      - name: Register new task definition
        id: register-task-def
        run: |
          # Register new task definition revision
          NEW_TASK_DEF=$(aws ecs register-task-definition --cli-input-json file://clean-task-definition.json)
          NEW_REVISION=$(echo $NEW_TASK_DEF | jq -r '.taskDefinition.revision')
          echo "new-revision=$NEW_REVISION" >> $GITHUB_OUTPUT
          echo "âœ… Registered new task definition: plantpal-task:$NEW_REVISION"

      - name: Update ECS service
        run: |
          # Update ECS service to use new task definition
          aws ecs update-service \
            --cluster fastapi-cluster \
            --service fastapi-service \
            --task-definition plantpal-task:${{ steps.register-task-def.outputs.new-revision }}
          
          echo "âœ… ECS service updated to use plantpal-task:${{ steps.register-task-def.outputs.new-revision }}"
          echo "ðŸ’¡ The new container will be deployed when the EC2 instance is running"
